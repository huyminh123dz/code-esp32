#include <BluetoothSerial.h>
#include <ESP32Servo.h>

// Khai báo đối tượng Bluetooth
BluetoothSerial SerialBT;

// Chân kết nối với module điều khiển động cơ
#define DIR_1_pin 23
#define PWM_1_pin 16
#define DIR_2_pin 22
#define PWM_2_pin 4
#define DIR_3_pin 18
#define PWM_3_pin 0
#define DIR_4_pin 17
#define PWM_4_pin 15

// Cảm biến dò line 5 mắt
#define linesens1 32
#define linesens2 33
#define linesens3 34
#define linesens4 35
#define linesens5 36

// Chân điều khiển servo
#define SERVO1_PIN 5
#define SERVO2_PIN 13
#define SERVO3_PIN 12
#define SERVO4_PIN 14
Servo servo1, servo2, servo3, servo4;
bool servo1State = false;
bool servo2State = false;
bool servo3State = false;
bool servo4State = false;

bool lineFollowingEnabled = false;

void setup() {
    Serial.begin(115200);
    SerialBT.begin("TN1_BANANANA");
    Serial.println("Bluetooth Started! Waiting for connection...");

    pinMode(DIR_1_pin, OUTPUT);
    pinMode(PWM_1_pin, OUTPUT);
    pinMode(DIR_2_pin, OUTPUT);
    pinMode(PWM_2_pin, OUTPUT);
    pinMode(DIR_3_pin, OUTPUT);
    pinMode(PWM_3_pin, OUTPUT);
    pinMode(DIR_4_pin, OUTPUT);
    pinMode(PWM_4_pin, OUTPUT);

    pinMode(linesens1, INPUT);
    pinMode(linesens2, INPUT);
    pinMode(linesens3, INPUT);
    pinMode(linesens4, INPUT);
    pinMode(linesens5, INPUT);

    servo1.setPeriodHertz(50);
    servo2.setPeriodHertz(50);
    servo3.setPeriodHertz(50);
    servo4.setPeriodHertz(50);

    servo1.attach(SERVO1_PIN);
    servo2.attach(SERVO2_PIN);
    servo3.attach(SERVO3_PIN);
    servo4.attach(SERVO4_PIN);

    servo1.write(0);
    servo2.write(0);
    servo3.write(0);
    servo4.write(0);
}

void loop() {
    if (SerialBT.available()) {
        char command = SerialBT.read();
        Serial.println(command);
        controlCar(command);
    }

    if (lineFollowingEnabled) {
        darkLineFollower();
    }
}

void controlCar(char command) {
    switch (command) {
        case 'F': moveForward(); break;
        case 'B': moveBackward(); break;
        case 'L': turnLeft(); break;
        case 'R': turnRight(); break;
        case 'S': stopCar(); break;
        case 'X': toggleServo1(); break;
        case 'Y': toggleServo2(); break;
        case 'T': toggleServo3(); break;
        case 'D': toggleServo4(); break;
        case 'Z':
            lineFollowingEnabled = !lineFollowingEnabled;
            if (!lineFollowingEnabled) stopCar();
            break;
    }
}

void darkLineFollower() {
    switch (deviationDarkLine5Sensor(linesens1, linesens2, linesens3, linesens4, linesens5)) {
        case -2:
        case -1: turnRight(); break;
        case 1:
        case 2: turnLeft(); break;
        case 0: moveForward(); break;
        case 3: moveBackward(); break;
    }
}

int deviationDarkLine5Sensor(int PinNumb1, int PinNumb2, int PinNumb3, int PinNumb4, int PinNumb5) {
    int left = digitalRead(PinNumb1) + digitalRead(PinNumb2);
    int right = digitalRead(PinNumb4) + digitalRead(PinNumb5);
    int center = digitalRead(PinNumb3);
    Serial.print("left="); Serial.println(left);
    Serial.print("center="); Serial.println(center);
    Serial.print("right="); Serial.println(right);
    if (center == 1) return 0;
    if (left > right) return -1 * left;
    if (right > left) return right;
    return 3;
}

void moveForward() {
    digitalWrite(DIR_1_pin, HIGH); analogWrite(PWM_1_pin, 150);
    digitalWrite(DIR_2_pin, HIGH); analogWrite(PWM_2_pin, 150);
    digitalWrite(DIR_3_pin, HIGH); analogWrite(PWM_3_pin, 150);
    digitalWrite(DIR_4_pin, HIGH); analogWrite(PWM_4_pin, 150);
}

void moveBackward() {
    digitalWrite(DIR_1_pin, LOW); analogWrite(PWM_1_pin, 150);
    digitalWrite(DIR_2_pin, LOW); analogWrite(PWM_2_pin, 150);
    digitalWrite(DIR_3_pin, LOW); analogWrite(PWM_3_pin, 150);
    digitalWrite(DIR_4_pin, LOW); analogWrite(PWM_4_pin, 150);
}

void turnLeft() {
    digitalWrite(DIR_1_pin, LOW); analogWrite(PWM_1_pin, 150);
    digitalWrite(DIR_2_pin, LOW); analogWrite(PWM_2_pin, 150);
    digitalWrite(DIR_3_pin, HIGH); analogWrite(PWM_3_pin, 150);
    digitalWrite(DIR_4_pin, HIGH); analogWrite(PWM_4_pin, 150);
}

void turnRight() {
    digitalWrite(DIR_1_pin, HIGH); analogWrite(PWM_1_pin, 150);
    digitalWrite(DIR_2_pin, HIGH); analogWrite(PWM_2_pin, 150);
    digitalWrite(DIR_3_pin, LOW); analogWrite(PWM_3_pin, 150);
    digitalWrite(DIR_4_pin, LOW); analogWrite(PWM_4_pin, 150);
}

void stopCar() {
    analogWrite(PWM_1_pin, 0);
    analogWrite(PWM_2_pin, 0);
    analogWrite(PWM_3_pin, 0);
    analogWrite(PWM_4_pin, 0);
}

void toggleServo1() {
    servo1State = !servo1State;
    servo1.write(servo1State ? 180 : 0);
}

void toggleServo2() {
    servo2State = !servo2State;
    servo2.write(servo2State ? 180 : 0);
}

void toggleServo3() {
    servo3State = !servo3State;
    servo3.write(servo3State ? 90 : 0);
}

void toggleServo4() {
    servo4State = !servo4State;
    servo4.write(servo4State ? 90 : 0);
}
